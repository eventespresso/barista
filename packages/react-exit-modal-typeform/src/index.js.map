{"version":3,"sources":["/Users/dethier/webprojects/vagrant/www/non-site-repos/ee-packages/packages/react-exit-modal-typeform/src/index.js"],"names":["CLOSE_MODAL_EVENT","ExitModal","React","Component","showModal","initialView","nextProps","nextState","modalOpen","content","closeModal","typeFormStyle","styles","showTypeForm","overlay","position","top","left","right","bottom","backgroundColor","border","background","overflow","WebkitOverflowScrolling","borderRadius","outline","padding","width","height","buttonClass","doSurvey","modalClassName","typeFormUrl","introText","doSurveyButtonText","skipButtonText","PropTypes","object","string"],"mappings":"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","sourcesContent":["/**\n * External Dependencies\n */\nimport React from 'react';\nimport ReactModal from 'react-modal';\nimport PropTypes from 'prop-types';\n\n/**\n * Internal dependencies\n */\nimport { ExitModalOptions, TypeFormEmbed } from './modal/index';\n\nexport const CLOSE_MODAL_EVENT = 'closeModalEvent';\n\nexport default class ExitModal extends React.Component {\n    constructor () {\n        super();\n        this.state = {\n            showModal: true,\n            initialView: true,\n        };\n    }\n\n    componentWillUpdate(nextProps,nextState) {\n        if (nextProps.showModal !== this.state.showModal) {\n            this.setState({showModal: nextProps.showModal});\n            this.setState({initialView: nextProps.initialView});\n        }\n    }\n\n    componentDidMount() {\n        this.closeModalEvent = new Event(CLOSE_MODAL_EVENT, {modalOpen: this.state.showModal});\n    }\n\n    componentWillUnmount() {\n        this.closeModalEvent = null;\n    }\n\n    handleCloseModal() {\n        this.setState({showModal: false});\n        //so external scripts listening on the react element can react.\n        this.el.dispatchEvent(this.closeModalEvent);\n    }\n\n    onDoSurvey() {\n        this.setState({initialView:false});\n    }\n\n    render() {\n        const content = this.state.initialView\n            ? <ExitModalOptions\n                onClose={() => this.handleCloseModal()}\n                onDoSurvey={() => this.onDoSurvey()}\n                introText={this.props.introText}\n                doSurveyButtonText={this.props.doSurveyButtonText}\n                skipButtonText={this.props.skipButtonText}\n                doSurveyButtonClass={this.props.buttonClass.doSurvey}\n                closeModalButtonClass={this.props.buttonClass.closeModal}\n                />\n            : <TypeFormEmbed\n                onSubmit={() => this.handleCloseModal()}\n                url={this.props.typeFormUrl}\n                popup={false}\n                typeFormStyle={this.props.styles.typeFormStyle}\n            />;\n        return (\n            <div ref={el => this.el = el}>\n                <ReactModal\n                    isOpen={this.state.showModal}\n                    style={this.props.styles}\n                >\n                    {content}\n                </ReactModal>\n            </div>\n        )\n    }\n}\n\n\nExitModal.defaultProps = {\n    showModal: true,\n    showTypeForm: false,\n    styles: {\n        overlay: {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            backgroundColor: 'rgba(255, 255, 255, 0.75)'\n        },\n        content: {\n            position: 'absolute',\n            top: '40px',\n            left: '40px',\n            right: '40px',\n            bottom: '40px',\n            border: '1px solid #ccc',\n            background: '#fff',\n            overflow: 'auto',\n            WebkitOverflowScrolling: 'touch',\n            borderRadius: '4px',\n            outline: 'none',\n            padding: '20px'\n        },\n        typeFormStyle: {\n            width: '600px',\n            height: '400px',\n        }\n    },\n    buttonClass: {\n        doSurvey: '',\n        closeModal: ''\n    },\n    modalClassName: {\n        content: '',\n        overlay: ''\n    },\n    typeFormUrl: '',\n    introText: \"We're sorry to see you go! Will you share feedback through a short survey to help us improve our product?\",\n    doSurveyButtonText: \"Sure I'll help!\",\n    skipButtonText: \"Skip\"\n};\n\nExitModal.propTypes = {\n    showModal: PropTypes.bool,\n    showTypeForm: PropTypes.bool,\n    styles: PropTypes.shape({\n        overlay: PropTypes.object,\n        content: PropTypes.object,\n        typeFormStyle: PropTypes.object\n    }),\n    modalClassName: PropTypes.shape({\n        overlay: PropTypes.string,\n        content: PropTypes.string,\n        typeFormStyle: PropTypes.string\n    }),\n    buttonClass: PropTypes.shape({\n        doSurvey: PropTypes.string,\n        closeModal: PropTypes.string\n    }),\n    typeFormUrl: PropTypes.string.isRequired,\n    introText: PropTypes.string,\n    skipButtonText: PropTypes.string,\n    doSurveyButtonText: PropTypes.string\n};\n"]}