@use "sass:map"; // https://sass-lang.com/documentation/modules/map
@use "sass:string"; // https://sass-lang.com/documentation/modules/string

// Map Collect function
// Since the builtin map-merge function in Sass only take 2 arguments, it can only merge 2 maps at a time.
// The map-collect function below allows you to combine multiple maps together in a cleaner way.
@function map-collect($maps...) {
	$collection: ();

	@each $map in $maps {
		$collection: map-merge($collection, $map);
	}
	@return $collection;
}

// Get multiple keys from a sass map
@function map-get-multiple($map, $values) {
	$result: ();
	@each $key, $value in $map {
		@if (index($values, $key) != null) {
			$result: map-merge(
				$result,
				(
					$key: $value,
				)
			);
		}
	}
	@return $result;
}

@function prepend-append($declarations, $color) {
	$colors: ();
	$key: '';

	@each $property, $value in $declarations {
		$text-on-string-exists: string.index($property, 'text-on') != null;
		$contrast-string-exists: string.index($property, 'contrast') != null;
		$on-index-plus-3: string.index($property, 'on') + 3;

		@if ($text-on-string-exists) {
			@if ($contrast-string-exists) {
				$key: string.insert($property, $color + '-', $on-index-plus-3); // output: text-on-blue-low-contrast
			} @else {
				$key: string.insert($property, '-' + $color, $on-index-plus-3); // output: text-on-blue
			}
		} @else {
			@if ($contrast-string-exists) {
				$key: #{'color' + '-' + $color + '-' + $property}; // output: color-blue-high-contrast
			} @else {
				$key: #{'color' + '-' + $color}; // output: color-blue
			}
		}

		$colors: map.merge(
			$colors,
			(
				$key: $value,
			)
		);
	}

	@return $colors;
}
